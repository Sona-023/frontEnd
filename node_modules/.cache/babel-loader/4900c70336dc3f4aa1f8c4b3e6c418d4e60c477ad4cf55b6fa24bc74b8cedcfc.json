{"ast":null,"code":"import { create } from 'zustand';\nexport const useChatStore = create((set, get) => ({\n  messages: [{\n    id: '1',\n    text: 'Hello! I\\'m your medical assistant. How can I help you today?',\n    sender: 'bot',\n    timestamp: new Date(),\n    type: 'text'\n  }],\n  isBotTyping: false,\n  addMessage: message => {\n    const newMessage = {\n      ...message,\n      id: Date.now().toString(),\n      timestamp: new Date()\n    };\n    set(state => ({\n      messages: [...state.messages, newMessage]\n    }));\n  },\n  setBotTyping: isTyping => {\n    set({\n      isBotTyping: isTyping\n    });\n  },\n  clearMessages: () => {\n    set({\n      messages: []\n    });\n  },\n  addBotResponse: text => {\n    const botMessage = {\n      id: Date.now().toString(),\n      text,\n      sender: 'bot',\n      timestamp: new Date(),\n      type: 'text'\n    };\n    set(state => ({\n      messages: [...state.messages, botMessage],\n      isBotTyping: false\n    }));\n  }\n}));","map":{"version":3,"names":["create","useChatStore","set","get","messages","id","text","sender","timestamp","Date","type","isBotTyping","addMessage","message","newMessage","now","toString","state","setBotTyping","isTyping","clearMessages","addBotResponse","botMessage"],"sources":["C:/Users/Sona_M/OneDrive/Desktop/MediChatbot/src/store/chatStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'bot';\r\n  timestamp: Date;\r\n  type: 'text' | 'audio';\r\n  audioUrl?: string;\r\n  isTyping?: boolean;\r\n}\r\n\r\ninterface ChatState {\r\n  messages: Message[];\r\n  isBotTyping: boolean;\r\n  addMessage: (message: Omit<Message, 'id' | 'timestamp'>) => void;\r\n  setBotTyping: (isTyping: boolean) => void;\r\n  clearMessages: () => void;\r\n  addBotResponse: (text: string) => void;\r\n}\r\n\r\nexport const useChatStore = create<ChatState>((set, get) => ({\r\n  messages: [\r\n    {\r\n      id: '1',\r\n      text: 'Hello! I\\'m your medical assistant. How can I help you today?',\r\n      sender: 'bot',\r\n      timestamp: new Date(),\r\n      type: 'text'\r\n    }\r\n  ],\r\n  isBotTyping: false,\r\n  \r\n  addMessage: (message) => {\r\n    const newMessage: Message = {\r\n      ...message,\r\n      id: Date.now().toString(),\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    set((state) => ({\r\n      messages: [...state.messages, newMessage]\r\n    }));\r\n  },\r\n  \r\n  setBotTyping: (isTyping) => {\r\n    set({ isBotTyping: isTyping });\r\n  },\r\n  \r\n  clearMessages: () => {\r\n    set({ messages: [] });\r\n  },\r\n  \r\n  addBotResponse: (text: string) => {\r\n    const botMessage: Message = {\r\n      id: Date.now().toString(),\r\n      text,\r\n      sender: 'bot',\r\n      timestamp: new Date(),\r\n      type: 'text'\r\n    };\r\n    \r\n    set((state) => ({\r\n      messages: [...state.messages, botMessage],\r\n      isBotTyping: false\r\n    }));\r\n  }\r\n}));\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAqBhC,OAAO,MAAMC,YAAY,GAAGD,MAAM,CAAY,CAACE,GAAG,EAAEC,GAAG,MAAM;EAC3DC,QAAQ,EAAE,CACR;IACEC,EAAE,EAAE,GAAG;IACPC,IAAI,EAAE,+DAA+D;IACrEC,MAAM,EAAE,KAAK;IACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;IACrBC,IAAI,EAAE;EACR,CAAC,CACF;EACDC,WAAW,EAAE,KAAK;EAElBC,UAAU,EAAGC,OAAO,IAAK;IACvB,MAAMC,UAAmB,GAAG;MAC1B,GAAGD,OAAO;MACVR,EAAE,EAAEI,IAAI,CAACM,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBR,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC;IAEDP,GAAG,CAAEe,KAAK,KAAM;MACdb,QAAQ,EAAE,CAAC,GAAGa,KAAK,CAACb,QAAQ,EAAEU,UAAU;IAC1C,CAAC,CAAC,CAAC;EACL,CAAC;EAEDI,YAAY,EAAGC,QAAQ,IAAK;IAC1BjB,GAAG,CAAC;MAAES,WAAW,EAAEQ;IAAS,CAAC,CAAC;EAChC,CAAC;EAEDC,aAAa,EAAEA,CAAA,KAAM;IACnBlB,GAAG,CAAC;MAAEE,QAAQ,EAAE;IAAG,CAAC,CAAC;EACvB,CAAC;EAEDiB,cAAc,EAAGf,IAAY,IAAK;IAChC,MAAMgB,UAAmB,GAAG;MAC1BjB,EAAE,EAAEI,IAAI,CAACM,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBV,IAAI;MACJC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBC,IAAI,EAAE;IACR,CAAC;IAEDR,GAAG,CAAEe,KAAK,KAAM;MACdb,QAAQ,EAAE,CAAC,GAAGa,KAAK,CAACb,QAAQ,EAAEkB,UAAU,CAAC;MACzCX,WAAW,EAAE;IACf,CAAC,CAAC,CAAC;EACL;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}