{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nexport const useAuthStore = create()(persist(set => ({\n  user: null,\n  isAuthenticated: false,\n  login: (phoneNumber, name) => {\n    const user = {\n      id: Date.now().toString(),\n      phoneNumber,\n      name: name || `User ${phoneNumber.slice(-4)}`\n    };\n    set({\n      user,\n      isAuthenticated: true\n    });\n  },\n  logout: () => {\n    set({\n      user: null,\n      isAuthenticated: false\n    });\n  },\n  updateUser: userData => {\n    set(state => ({\n      user: state.user ? {\n        ...state.user,\n        ...userData\n      } : null\n    }));\n  }\n}), {\n  name: 'auth-storage',\n  storage: createJSONStorage(() => localStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","useAuthStore","set","user","isAuthenticated","login","phoneNumber","name","id","Date","now","toString","slice","logout","updateUser","userData","state","storage","localStorage"],"sources":["C:/Users/Sona_M/OneDrive/Desktop/MediChatbot/src/store/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist, createJSONStorage } from 'zustand/middleware';\r\n\r\ninterface User {\r\n  id: string;\r\n  phoneNumber: string;\r\n  name?: string;\r\n}\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (phoneNumber: string, name?: string) => void;\r\n  logout: () => void;\r\n  updateUser: (userData: Partial<User>) => void;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>()(\r\n  persist(\r\n    (set) => ({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      login: (phoneNumber: string, name?: string) => {\r\n        const user: User = {\r\n          id: Date.now().toString(),\r\n          phoneNumber,\r\n          name: name || `User ${phoneNumber.slice(-4)}`\r\n        };\r\n        set({ user, isAuthenticated: true });\r\n      },\r\n      logout: () => {\r\n        set({ user: null, isAuthenticated: false });\r\n      },\r\n      updateUser: (userData: Partial<User>) => {\r\n        set((state) => ({\r\n          user: state.user ? { ...state.user, ...userData } : null\r\n        }));\r\n      }\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      storage: createJSONStorage(() => localStorage),\r\n    }\r\n  )\r\n);\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;AAgB/D,OAAO,MAAMC,YAAY,GAAGH,MAAM,CAAY,CAAC,CAC7CC,OAAO,CACJG,GAAG,KAAM;EACRC,IAAI,EAAE,IAAI;EACVC,eAAe,EAAE,KAAK;EACtBC,KAAK,EAAEA,CAACC,WAAmB,EAAEC,IAAa,KAAK;IAC7C,MAAMJ,IAAU,GAAG;MACjBK,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBL,WAAW;MACXC,IAAI,EAAEA,IAAI,IAAI,QAAQD,WAAW,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC;IACDV,GAAG,CAAC;MAAEC,IAAI;MAAEC,eAAe,EAAE;IAAK,CAAC,CAAC;EACtC,CAAC;EACDS,MAAM,EAAEA,CAAA,KAAM;IACZX,GAAG,CAAC;MAAEC,IAAI,EAAE,IAAI;MAAEC,eAAe,EAAE;IAAM,CAAC,CAAC;EAC7C,CAAC;EACDU,UAAU,EAAGC,QAAuB,IAAK;IACvCb,GAAG,CAAEc,KAAK,KAAM;MACdb,IAAI,EAAEa,KAAK,CAACb,IAAI,GAAG;QAAE,GAAGa,KAAK,CAACb,IAAI;QAAE,GAAGY;MAAS,CAAC,GAAG;IACtD,CAAC,CAAC,CAAC;EACL;AACF,CAAC,CAAC,EACF;EACER,IAAI,EAAE,cAAc;EACpBU,OAAO,EAAEjB,iBAAiB,CAAC,MAAMkB,YAAY;AAC/C,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}